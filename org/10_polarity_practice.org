#+TITLE: Sentiment analysis in R - Fast & Dirty: Polarity Scoring - PRACTICE
#+AUTHOR: [your name & pledge]
#+SUBTITLE: Digital Humanities DSC 105 Spring 2023
#+STARTUP:overview hideblocks indent inlineimages
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :session *R* :results output :exports both :noweb yes
* README

- This lecture closely follows the DataCamp lesson "Sentiment analysis
  in R" by Ted Kwartler and the book "Text mining in Practice" by the
  same author.

- Download and open the practice file ~10_polarity_practice.org~ from
  GitHub to code along.

- What you will learn:
  1) What is sentiment analysis
  2) What is polarity
  3) How to visualize polarity
  4) What are subjectivity lexicons
  5) What is Zipf's law

- Featured R packages:
  1. Sentiment scoring with ~qdap::polarity~
  2. The archived ~sentiment~ analysis package
  3. Sentiment scoring with ~tidytext~

* Scoring in ~qdap::polarity~

- Arguments of the ~polarity~ function:
  #+begin_src R

  #+end_src

* Visualize polarity

- Create data frame with a ~person~ and a ~text~ column:
  #+begin_src R :results silent
    text_df <- data.frame(
      person=c("Nick", "Jonathan", "Martijn","Nicole",
               "Nick", "Jonathan", "Martijn", "Nicole"),
      text=c("DataCamp courses are the best",
             "I like talking to students",
             "Other online data science curricula are boring.",
             "What is for lunch?",
             "DataCamp has lots of great content!",
             "Students are passionate and are excited to learn",
             "Other data science curriculum is hard to learn and difficult to understand",
             "I think the food here is good."))
  #+end_src

- Remove punctuation (otherwise ~polarity~ will complain about it):
  #+begin_src R :results silent

  #+end_src

- Examine the text data:
  #+begin_src R

  #+end_src

- Compute polarity on the ~text~:
  #+begin_src R

  #+end_src

- Group by the ~person~ column and save the result:
  #+begin_src R

  #+end_src

- Apply ~qdap::counts~ to print the specific emotional words that were
  found:
  #+begin_src R

  #+end_src

- Plot the ~datacamp_conversation~ with ~plot~ (which has a suitable
  method for polarity output already):
  #+begin_src R :results graphics file :file ../img/dc_conversation.png

  #+end_src

* Components of ~polarity~

- Look at the structure of ~datacamp_conversation~:
  #+begin_src R

  #+end_src

- Extract the positive and negative words, the text, and the people:
  type each of the answers and run it before typing the next one!
  #+begin_src R

  #+end_src

* Adding terms to the subjectivity lexicon

- To add new terms, define a vector ~new.pos~:
  #+begin_src R :results silent

  #+end_src

- Load ~qdap~. Its basic subjectivity lexicon is held in a list
  ~key.pol~ - it contains 6779 terms ~x~ and their polarity labels ~y~.
  #+begin_src R

  #+end_src

- How can you get the list of all dictionaries in ~qdap~? You can see
  all ~qdap~ packages in the ~search()~ vector:
  #+begin_src R

  #+end_src

- Now use ~data~ to list the dictionaries in ~qdapDictionaries~:
  #+begin_src R

  #+end_src

- Put terms 'rofl' and 'lol' into a vector ~new.pos~:
  #+begin_src R :results silent
    ## new positive terms 
  #+end_src

- Use the ~subset(x,pattern)~ function to retain only the original
  ~key.pol~ terms that have polarity 1 and store them in ~old.pos~:
  #+begin_src R

  #+end_src

- Add ~new.pos~ to ~old.pos~ and create ~all.pos~:
  #+begin_src R :results silent

  #+end_src

- Proceed accordingly with the negative portion of the subjectivity
  lexicon. For example to include the terms 'kappa' (used among gamers
  to express sarcasm) and 'meh' (unenthusiastic):
  #+begin_src R :results silent

  #+end_src

- To compute polarity score, ~polarity~ uses a sentiment lookup table as
  a function of vectors of ~positives~ and ~negatives~ and their weights:
  #+begin_src R

  #+end_src

- We need to create a new sentiment data frame ~all.polarity~ replacing
  ~key.pol~ using ~sentiment_frame~:
  #+begin_src R

  #+end_src
  
- You can see that there are four more words included:
  #+begin_src R

  #+end_src

* Using the extended subjectivity lexicon

- Consider the sample sentences:
  #+begin_src R :results silent
    foo <- 'ROFL, look at that!'
    bar <- 'Whatever you say - Kappa.'
  #+end_src

- Applying ~polarity~ returns the polarity scores:
  #+begin_src R

  #+end_src

- When computing the polarity with the standard lexicon, polarity is
  zero or neutral, because 'ROFL' was not found in the lexicon:
  #+begin_src R

  #+end_src

- Applying ~polarity~ and ~all.polarity~ to the second sentence:
  #+begin_src R

  #+end_src

* Observing Zipf's law for a big data set

- Getting the data and reviewing the top words:
  #+begin_src R
    sb_words=read.csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vSr1GbdxxFhoZcAqH_pkr-E61NMiKnffJdAPlbfLv5FrfJkTgOeDq8KCv1-WolHMf0N0K-5nUcMH3Ta/pub?gid=842100586&single=true&output=csv")
    ## Examine sb_words - use head() and str()

  #+end_src

- Create a new column expectations by dividing the largest word
  frequency, ~freq[1]~, by the ~rank~ column:
  #+begin_src R

  #+end_src

- Load ~metricsgraphics~ (must be installed). Start ~sb_plot~ using
  ~mjs_plot~, and pass in ~data=sb_words~ with ~x = rank~, ~y = freq~ and
  set ~show_rollover_text~ to ~FALSE~:
  #+begin_src R :results silent

  #+end_src

- Add first line to ~sb_plot~:
  #+begin_src R :results silent

  #+end_src

- Add 2nd line to ~sb_plot~ with ~mjs_add_line()~. Pass in the previous
  ~sb_plot~ object and the vector, ~expectations~:
  #+begin_src R :results silent

  #+end_src

- Place a legend on a new ~sb_plot~ object using ~mjs_add_legend~:
  1) pass in the previous ~sb_plot~ object
  2) The legend ~labels~ should consist of "Frequency" and
     "Expectation":
  #+begin_src R :results silent

  #+end_src

- Call ~sb_plot~ to display the plot. Mouseover a point to
  simultaneously highlight a ~freq~ and Expectation point:
  #+begin_src R :results graphics :file ./img/sb_plot.png
      ## This will open an interactive plot in the browser
  #+end_src

