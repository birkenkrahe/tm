#+TITLE: Bag-of-Words extended example - Delta Airline Tweets
#+AUTHOR: [yourname]
#+SUBTITLE: In-class practice
#+STARTUP:overview hideblocks indent
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :session *R* :results output :exports both :noweb yes
* README

This file covers the Delta airline tweet example from the introductory
lecture on text mining with Bag-of-Words:
- Getting the data
- String manipulation

Most of this material can be found in Kwartler, Text mining in
practice with R (Wiley, 2019). Solutions are on GitHub as PDF files.

* TODO Identify and pledge yourself

1) In Emacs, replace the placeholder ~[yourname]~ at the top of this
   file by your own name and write ~(pledged)~ next to it
2) Go with the cursor on the headline and hange the ~TODO~ label to ~DONE~
   by entering ~S-<right>~ ("Shift + right-arrow").
* TODO Set up literate programming in R

1) Test your Emacs configuration for literate programming in R by
   creating and running a code block.

2) Create a new code block with ~<s TAB R~ below the line and put
   ~head(mtcars)~ into it:

   -----



If you don't get any output consider the following fixes:
- Is the correct ~.emacs~ installed in ~~/~?
- After installing it, did you reopen Emacs or run the file?
- Did the last step generate any warnings?

* TODO Set up the text mining environment in R

1) Open a command line terminal (enter ~CMD~ in the search field)
2) Enter ~R~ at the prompt to start an R terminal (or shell)
3) Install three packages: ~stringi~, ~stringr~ and ~qdap~ with the
   following commands:
   #+begin_example R
    install.packages("stringi")
    install.packages("stringr")
    install.packages("qdap")
  #+end_example

4) Load each package with the ~library~ function applied to each of the
   packages in turn:
   #+begin_src R



   #+end_src

5) Check which packages are loaded in your current R session with
   ~search()~
   #+begin_src R

   #+end_src

6) Go back to the R buffer ~*R*~ with ~C-x b~ - then cycle through the
   open buffers with ~M-n~ and ~M-p~

7) Open the documentation for ~stringi~, ~stringr~ and ~qdap~ with the ~help~
   function (or the shortcut ~?~).
* TODO Quick taste of test mining

1) Load ~qdap~
   #+begin_src R

   #+end_src
   
2) Store this text in a vector ~text~: "DataCamp is the first online
   learning platform that focuses on building the best learning
   experience specifically for Data Science. We have offices in New
   York, London, and Belgium, and to date, we trained over 11 million
   (aspiring) data scientists in over 150 countries. These data
   science enthusiasts completed more than 667 million exercises. You
   can take free beginner courses, or subscribe for $25/month to get
   access to all premium courses."
   #+begin_src R

   #+end_src

3) Find the 10 most frequent terms and store them in ~term_count~:
   #+begin_src 

   #+end_src

4) Plot the term count:
   #+begin_src R :results graphics file :file term_count.png

   #+end_src

* TODO Getting the data

1) Download the online CSV ("Comma Separated Values") dataset [[https://assets.datacamp.com/production/repositories/19/datasets/27a2a8587eff17add54f4ba288e770e235ea3325/coffee.csv][from
   this URL]] to your PC and name the file ~coffee.csv~.

2) Load the CSV data into an R data frame with ~read.csv~ and assign it
   to an R object ~coffee_tweets.df~ using the ~<-~ assignment operator:
   #+begin_src R

   #+end_src

* TODO First look at the data

1) Look at the structure of ~coffee_tweets.df~ with ~str~:
   #+begin_src R

   #+end_src

2) Store the tweets (~text~ column) in a vector ~coffee_tweets~ and view
   first ~n=5~ tweets:
   #+begin_src R

     
   #+end_src

3) Print the structure of the vector with ~str~:
  #+begin_src R

  #+end_src

* TODO Wow! Congratulations!

Well done! You've reached the end of the first in-class practice file.

If you've completed all steps, you can now upload the Org-mode file to
Canvas (see ~Assignments > In-class practice~.
