#+TITLE: Text mining in practice - Bag of Words - stopwords
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: Digital Humanities DSC 105 Spring 2023
#+STARTUP:overview hideblocks indent inlineimages
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :session *R* :results output :exports both :noweb yes
* README

- This lecture closely follows the 3rd part of the DataCamp lesson
  "Jumping into Text Minin with Bag-of-Words" by Ted Kwartler, part of
  his course on [[https://campus.datacamp.com/courses/text-mining-with-bag-of-words-in-r/]["Text Mining with Bag-of-Words in R"]].

- Download and open the practice file ~5_stopwords_practice.org~ from
  GitHub to code along.

* Getting the coffee data

Run this in case you had to interrupt the previous session and don't
have the data in your R session:
  #+begin_src R :results silent
    library(tm)
    coffee_df <- read.csv("../data/coffee.csv") # dataframe
    coffee_vec <- coffee_df$text # vector
    coffee_src <- VectorSource(coffee_vec) # source
    coffee_corpus <- VCorpus(coffee_src)
  #+end_src

* All about stop words

- Load the ~tm~ package and look for the ~stopwords~ function:
  #+begin_src R
    library(tm)
    ## is stopwords any of the functions in tm?
    f_tm <- ls('package:tm') # store all function names in f_tm
    any(f_tm=="stopwords") # check every function against "stopwords"
  #+end_src

- The function ~any~ is very useful: it checks if any of its arguments
  are true:
  #+begin_src R
    any(c(T,F,F,F,F,F)==TRUE)
    any(c(F,F,F)==TRUE)
    any("Joe" %in% c("Jim","Joe","Jane")) # is Joe in the team?
    any("Josh" %in% c("Jim","Joe","Jane")) # is Josh in the team?
  #+end_src

  #+RESULTS:
  : [1] TRUE
  : [1] FALSE
  : [1] TRUE
  : [1] FALSE
  
- Check out the ~stopwords~ in English ("en" or "english"), Spanish
  ("es"), German ("de" or "german").
  #+begin_src R
    stopwords("en")
  #+end_src

- Check yourself if the word "should" is in ~stopwords("en")~:
  #+begin_src R
    any(stopwords("en")=="should")
  #+end_src

- Add two stop words to ~stopwords("en")~ and check that they were added:
  1) append "word1" and "word2" to ~stopwords("en")~ using ~c()~
  2) store the result in ~all_stops~
  3) display the first two entries of ~all_stops~
  #+begin_src R 
    all_stops <- c("word1", "word2", stopwords("en"))
    head(all_stops,2)
  #+end_src

- To remove words, you can use ~tm::removeWords~. It takes two
  /arguments/: the text object to which it is applied, and the list of
  words to remove.

- List the arguments of ~removeWords~.
  #+begin_src R
    args(removeWords)
  #+end_src

- You see that there are two arguments: ~x~ is the input dataset, and
  ~words~ are the words to be removed as ~character~ strings.
  
* Exercise with ~stopwords~

- Remove all ~stopwords~ from sample ~text~, add two words to the standard
  ~stopwords~ dictionary, and remove them from ~text~, too.

- Define sample ~text~ vector.
  #+begin_src R
    text <-
      "<b>She</b> woke up at       6 A.M. It\'s so
       early!  She was only 10% awake and began drinking
       coffee in front of her computer."
    text
  #+end_src
- Remove "en" stopwords from ~text~ with ~removeWord~.
  #+begin_src R
    text
    removeWords(text, stopwords("en"))
  #+end_src
- Add "coffee" and "bean" to the standard stop words and assign the
  result to ~new_stops~. Check that they are in ~new_stops~!
  #+begin_src R
    new_stops <- c("coffee", "bean", stopwords("en"))
    head(new_stops,2)
  #+end_src
- Wait a moment! What if these words were already in ~stopwords~? 
  1) save ~stopwords("en")~ as ~old_stops~
  2) check if any elements of ~old_stops~ are "coffee" or "bean"
  3) check if any elements of ~new_stops~ are "coffee" or "bean"
  #+begin_src R
    old_stops <- stopwords("en") # store old stopwords in old_stops
    any(old_stops=="coffee"|old_stops=="bean") 
    any(new_stops=="coffee"|new_stops=="bean")
  #+end_src
- Remove the customized stopwords, ~new_stops~, from ~text~:
  #+begin_src R
    text
    removeWords(text, new_stops)
  #+end_src

  #+RESULTS:
  : [1] "<b>She</b> woke up at       6 A.M. It's so\n   early!  She was only 10% awake and began drinking\n   coffee in front of her computer."
  : [1] "<b>She</b> woke         6 A.M. It's \n   early!  She   10% awake  began drinking\n     front   computer."

* Finding a string in a dataset

- To find a tweet in ~coffee_vec~ that contains both words, we need a
  few more tricks: index vectors with ~which~ and pattern search with
  ~grepl~.

- ~which~ runs its ~logical~ argument a vector and returns the indices
  that satisfy the logical argument:
  #+begin_src R
    foo <- c(10,20,30,40,50)  # sample vector
    which (foo == 20)  # which elements of x are equal 2?
    which (foo >= 30)  # which elements of x are greater or equal to 3?
  #+end_src

- The same thing works with ~character~ vectors:
  #+begin_src R
    bar <- c("High", "Noon", "in", "Batesville")
    which (bar == "High")  # elements of bar equal "High"
    which (bar == "Batesville" | # elements of bar either 
           bar == "in")          # equal "Batesville" or equal "in"
  #+end_src

- It also works with ~stopwords~: e.g. is "cannot" in the ~stopwords~
  vector?
  #+begin_src R
    str(stopwords()) # structure
    idx <- which(stopwords("en") == "cannot") # index vector
    stopwords("en")[idx] # extract the element no. idx 
  #+end_src

- ~grepl~ checks if its ~pattern~ is contained in a dataset ~x~. It returns
  a ~logical~ vector, a matrh or not for each element of ~x~:
  #+begin_src R
    args(grepl)
  #+end_src

- For example: check if any coffee tweets contain the word "Ramadan"
  #+begin_src R
    any(grepl(pattern="Ramadan",x=coffee_vec))
    #+end_src  

- Combine ~grepl~ and ~which~ to extract the corresponding index:
  #+begin_src R
    which(grepl(pattern="Ramadan",x=coffee_vec))
  #+end_src

- Then print the corresponding tweets:
  #+begin_src R
    idx <- which(grepl(pattern="Ramadan",x=coffee_vec))
    coffee_vec[idx]
  #+end_src

  #+RESULTS:
  : [1] "My dad is happy Ramadan is over so he can have his morning cup of coffee now."
  : [2] "First morning coffee after Ramadan http://t.co/ZEu6cl9qGY"

* Finding certain tweets in ~coffee_vec~

- Now, to find the tweets in ~coffee_vec~ that contain "coffee" AND
  "beans":
  1) create an index vector of tweets that contain "beans"
  2) store these tweets in ~bean~
  3) create an index vector of ~bean~ tweets that contain "coffee"
  4) store these tweets in ~coffee~
     
  #+begin_src R
    idx_bean <- which(grepl("bean",coffee_vec)) 
    bean <- coffee_vec[idx_bean] # all tweets with "bean"
    idx_coffee_bean <- which(grepl("coffee",bean))
    coffee_bean <- bean[idx_coffee_bean] 
    coffee_bean
  #+end_src

  #+RESULTS:
  #+begin_example
   [1] "Fun fact: roast your own coffee bean at home using a popcorn machine! @YelpAdelaide #coffeecrawl"                                           
   [2] "Michael Jackson and Slash walk into a coffee bean... #hollywoodblvd"                                                                        
   [3] "It is a good night when both of your friends bring you coffee beans."                                                                       
   [4] "@NickThayer oh worth mentioning, went to a place that's roasts their own beans in house. Some of the best coffee I've tasted #heaven #snobs"
   [5] "@coreybking We are kin in our rejection of the coffee bean and its cohorts... #ConfessYourUnpopularOpinion"                                 
   [6] "Wired offa that coffee bean haha"                                                                                                           
   [7] "I love bringing home locally roasted #coffee beans from all of the cities I visit for @marshallhines? http://t.co/d4cnURL3jW"               
   [8] "RT @jelenasaurus: I want this!!! #coffee #icecubes #coolbeans #punny http://t.co/sLg1jdj4TG"                                                
   [9] "omg the auroma in coffee bean makes me feel super hungry"                                                                                   
  [10] "I want this!!! #coffee #icecubes #coolbeans #punny http://t.co/sLg1jdj4TG"
  #+end_example

- Now re-run the code above to remove "bean" and "coffee" from the
  selection ~coffee_bean~:
  #+begin_src R
    removeWords(coffee_bean, new_stops)
  #+end_src

  #+RESULTS:
  #+begin_example
   [1] "Fun fact: roast      home using  popcorn machine! @YelpAdelaide #coffeecrawl"                                 
   [2] "Michael Jackson  Slash walk    ... #hollywoodblvd"                                                            
   [3] "It   good night     friends bring   beans."                                                                   
   [4] "@NickThayer oh worth mentioning, went   place  roasts   beans  house. Some   best  I've tasted #heaven #snobs"
   [5] "@coreybking We  kin   rejection       cohorts... #ConfessYourUnpopularOpinion"                                
   [6] "Wired offa    haha"                                                                                           
   [7] "I love bringing home locally roasted # beans     cities I visit  @marshallhines? http://t.co/d4cnURL3jW"      
   [8] "RT @jelenasaurus: I want !!! # #icecubes #coolbeans #punny http://t.co/sLg1jdj4TG"                            
   [9] "omg  auroma    makes  feel super hungry"                                                                      
  [10] "I want !!! # #icecubes #coolbeans #punny http://t.co/sLg1jdj4TG"
  #+end_example

